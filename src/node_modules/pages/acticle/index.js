import React, {
	Fragment,
	useEffect,
	useState
} from 'react';
import { Redirect } from "react-router-dom";

import useCheckIsAuthor from 'hooks/useCheckIsAuthor';

import useFetch from 'hooks/useFetch';
import Loading from 'components/loadind';
import TagList from 'components/tagList';
import ErrorMessage from 'components/errorMessage';
import ArticleMeta from 'pages/acticle/components/articleMeta';
import CommentsListWithForm from 'pages/acticle/components/commentsListWithForm';

const Article = (props) => {
	const slug = props.match.params.slug;
	const apiUrl = `/articles/${slug}`;
	const [
		{ response: fetchArticleResponse,
			error: fetchArticleError,
			isLoading: fetchArticleIsLoading,
		},
		doFetch
	] = useFetch(apiUrl);
	const [{ response: deleteArticleResponse }, doDeleteArticle] = useFetch(apiUrl);
	const [isSuccessfulDelete, setIsSuccessfulDelete] = useState(false);
	const isAuthor = useCheckIsAuthor(fetchArticleResponse
		? fetchArticleResponse.article.author.username
		: null
	);

	const deleteArticle = () => {
		doDeleteArticle({
			method: 'delete',
		});
	};

	useEffect(() => {
		doFetch();
	}, [doFetch]);
	
	useEffect(() => {
		if (!deleteArticleResponse) {
			return;
		}

		setIsSuccessfulDelete(true);
	}, [deleteArticleResponse]);

	if (isSuccessfulDelete) {
		return <Redirect to='/' />
	}

	return (
		<div className='article-page'>
			<div className='banner'>
				{!fetchArticleIsLoading && fetchArticleResponse && (
					<div className='container'>
						<h1>{fetchArticleResponse.article.title}</h1>
						<ArticleMeta
							slug={slug}
							fetchArticleResponse={fetchArticleResponse}
							deleteArticle={deleteArticle}
							isAuthor={isAuthor}
						/>
					</div>
				)}
			</div>
			<div className='container page'>
				{fetchArticleIsLoading && <Loading />}
				{fetchArticleError && <ErrorMessage />}
				{!fetchArticleIsLoading && fetchArticleResponse && (
					<Fragment>
						<div className='row article-content'>
							<div className='col-md-12'>
								<div>
									<p>{fetchArticleResponse.article.body}</p>
								</div>
								<TagList tags={fetchArticleResponse.article.tagList} />
							</div>
						</div>
						<hr />
						<CommentsListWithForm
							slug={slug}
							authorImage={fetchArticleResponse.article.author.image}
							isAuthor={isAuthor}
						/>
					</Fragment>
				)}
			</div>
		</div>
	);
};

export default Article;